
Precendence rules in an expression.

() [] -> . :: Function call, scope, array/member access
! ~ - + * & sizeof type cast ++ -- unary operators, sizeof and type casts
^ Exponential
* / % mod Multiplication, division, modulo
+ - addition and subtraction
<< >> Bitwise shifts
< <= > >= Comparisons
== != Bitwise AND
& Bitwise exclusive OR (XOR)
^^ Bitwise inclusive OR
| Bitwise inclusive OR
&& Logical AND
|| Logical OR
?: Conditional expression (ternary)
= == -= *= /= %= &= != ^= <<= >>= Assignment operators
, Comma operator


exps -> exp1, exps //Comma
exps -> exp1
exp1 -> exp2
exp1 -> exp1 | exp2 //Or
exp2 -> exp3
exp2 -> exp2 ^ exp3 //Xor
exp3 -> exp4
exp3 -> exp3 && exp4 //And
exp4 -> exp4.1
exp4 -> exp4 comp exp4.1 //Logical Compare
exp4.1-> boolID
exp4.1 -> exp5
exp5 -> exp5 relcomp exp6
exp6 -> exp6 shift exp7 //Bit Shift
exp7 -> exp8
exp7 -> exp7 addsub exp8 //Addition Subtraction Oberation
exp8 -> exp9
exp8 -> exp8 ^^ exp9 //Power Operator
exp9 -> exp10
exp9 -> unary exp10 //Needed to exist in the comparison precedence.
exp10 -> call

logexp -> logexp | logexp1
logexp -> logexp1
logexp1 -> logexp1 ^ logexp2
logexp1 -> logexp2
logexp2 -> logexp2 && logexp3
logexp2 -> logexp3
logexp3 -> logexp3 == logexp4
logexp3 -> logexp4
logexp4 -> logexp4 relcomp exp6
