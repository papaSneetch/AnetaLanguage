Terminals

if,else,for,while,return
string,int,float,bool,ptr
[,],[,],{,},(,)
+,-,*,\,^,%,?,++,--
==,+=,-=,!=,=,&&,||,&, , , ; ,!

Non-Terminals:
stat (Statement): A seperate command to run in the program.
exp (Expression): An evaluating statement.
type: A type terminal. string,int,float,bool,ptr
call: A variable or function call.
varID: Looks up a name on the variable table.
funcID: Looks up a name on the function table
cond (conditional): An break in a program flow. if,else,for,while
param (parameters): Fills in parameters for a function.
decl (declaration): A variable of function declaration.
decls (declarations): Multiple declarations for function parameters.

stats -> stat stat
stat -> varDecl;
stat -> arrayDecl
stat -> funcCall;
stat -> funcDecl 
stat -> condStat
stat -> asignStat
stat -> whileloop
whileloop -> while (tfexpr) {stats}
arrayDecl -> typeDecl [int] = {paramDecls};
asignStat -> varID = exp
condStat -> ifStat
condStat -> ifStat postIfStat
postIfStat -> elseIfStat postIfStat
postIfStat -> elseStat
ifStat -> if (tfexpr) {stats}
elseIfStat -> else if (tfexpr) {stats}
elseStat -> else (tfexpr) {stats}
varDecl -> typeDecl; 
varDecl -> typeDecl = exp;
funcDecl -> typeDecl (paramDecls) {stats retstat} 
paramDecls -> paramDecl, paramDecls   
paramDecls -> paramDecl
paramDecl -> typeDecl
paramDecl -> typeDecl = exp
funcCall -> funcID (params)
tfexpr -> tfexpr & tfexpr
tfexpr -> tfexpr | tfexpr
tfexpr -> tfexpr ^ tfexpr
tfexpr -> !tfexpr
tfexpr -> tfvalue
tfvalue -> true
tfvalue -> false
tfvalue -> boolVarID
tfvalue -> exp == exp
params -> exp, params
params -> exp
exp -> varID
exp -> funcCall
exp -> addexp
exp -> subextp
exp -> multexp
exp -> divexp
exp -> andexp
exp -> orexp
exp -> xorexp
exp -> powexp
exp -> orexp
addexp -> literal + exp
subexp -> literal - exp
multexp -> literal * exp
divexp -> literal \ exp
andexp -> literal & exp
orexp -> literal | exp
xorexp -> literal ^^ exp
powexp -> literal ^ exp
brackexp -> (exp)
exp -> literal

//Note, we need a way to seperate an evaluation from an expression. For loops should also be able to express a range. 
 
//Note, we only have 1 look ahead. We need to keep nonterminals from having colisions in statments.


Precendence rules in an expression.

() [] -> . :: Function call, scope, array/member access
! ~ - + * & sizeof type cast ++ -- unary operators, sizeof and type casts
^ Exponential
* / % mod Multiplication, division, modulo
+ - addition and subtraction
<< >> Bitwise shifts
< <= > >= Comparisons
== != Bitwise AND
& Bitwise exclusive OR (XOR)
^^ Bitwise inclusive OR
| Bitwise inclusive OR
&& Logical AND
|| Logical OR
?: Conditional expression (ternary)
= == -= *= /= %= &= != ^= <<= >>= Assignment operators
, Comma operator


exps -> exp1, exps
exp1 -> exp2
exp1 -> exp1 | exp2
exp2 -> exp3
exp2 -> exp2 ^ exp3
exp3 -> exp4
exp3 -> exp3 && exp4
exp4 -> exp5
exp4 -> exp4 comp exp5
exp5 -> exp6
exp6 -> exp6 shift exp7
exp7 -> exp8
exp7 -> exp7 addsub exp8
exp8 -> exp9
exp8 -> exp8 ^^ exp9
exp9 -> exp10
exp9 -> unary exp10
exp10 -> call
